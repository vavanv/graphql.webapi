@model IEnumerable<GraphQL.WebApi.Mvc.Models.Customer>

@{
    ViewData["Title"] = "Customers";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1><i class="bi bi-people"></i> Customers</h1>
        <a asp-action="Create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Create New Customer
        </a>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle"></i> @ViewBag.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="card">
        <div class="card-body">
            @if (!Model.Any())
            {
                <div class="text-center py-4">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h4 class="mt-3">No customers found</h4>
                    <p class="text-muted">No customers have been added yet.</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Contact</th>
                                <th>Email</th>
                                <th>Date of Birth</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var customer in Model)
                            {
                                <tr>
                                    <td>@customer.Id</td>
                                    <td>@customer.FirstName @customer.LastName</td>
                                    <td>@customer.Contact</td>
                                    <td>@customer.Email</td>
                                    <td>@customer.DateOfBirth.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-info"
                                                    onclick="showCustomerDetails(@customer.Id, '@customer.FirstName', '@customer.LastName', '@customer.Contact', '@customer.Email', '@customer.DateOfBirth.ToString("yyyy-MM-dd")')">
                                                <i class="bi bi-eye"></i> Details
                                            </button>
                                            <button type="button" class="btn btn-sm btn-warning"
                                                    onclick="showEditCustomer(@customer.Id, '@customer.FirstName', '@customer.LastName', '@customer.Contact', '@customer.Email', '@customer.DateOfBirth.ToString("yyyy-MM-dd")')">
                                                <i class="bi bi-pencil"></i> Edit
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger"
                                                    onclick="showDeleteCustomer(@customer.Id, '@customer.FirstName', '@customer.LastName')">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Customer Details Modal -->
<div class="modal fade" id="customerDetailsModal" tabindex="-1" aria-labelledby="customerDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="customerDetailsModalLabel">
                    <i class="bi bi-person-circle"></i> Customer Details
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="fw-bold">ID:</label>
                            <p id="detail-id"></p>
                        </div>
                        <div class="mb-3">
                            <label class="fw-bold">First Name:</label>
                            <p id="detail-firstName"></p>
                        </div>
                        <div class="mb-3">
                            <label class="fw-bold">Last Name:</label>
                            <p id="detail-lastName"></p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="fw-bold">Contact:</label>
                            <p id="detail-contact"></p>
                        </div>
                        <div class="mb-3">
                            <label class="fw-bold">Email:</label>
                            <p id="detail-email"></p>
                        </div>
                        <div class="mb-3">
                            <label class="fw-bold">Date of Birth:</label>
                            <p id="detail-dateOfBirth"></p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-warning" id="editFromDetailsBtn">
                    <i class="bi bi-pencil"></i> Edit Customer
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Customer Modal -->
<div class="modal fade" id="editCustomerModal" tabindex="-1" aria-labelledby="editCustomerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="editCustomerModalLabel">
                    <i class="bi bi-pencil-square"></i> Edit Customer
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editCustomerForm" asp-action="Edit" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="edit-id" name="Id" />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit-firstName" class="form-label">First Name</label>
                                <input type="text" class="form-control" id="edit-firstName" name="FirstName" required />
                            </div>
                            <div class="mb-3">
                                <label for="edit-lastName" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="edit-lastName" name="LastName" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit-contact" class="form-label">Contact</label>
                                <input type="text" class="form-control" id="edit-contact" name="Contact" required />
                            </div>
                            <div class="mb-3">
                                <label for="edit-email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="edit-email" name="Email" required />
                            </div>
                            <div class="mb-3">
                                <label for="edit-dateOfBirth" class="form-label">Date of Birth</label>
                                <input type="date" class="form-control" id="edit-dateOfBirth" name="DateOfBirth" required />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">
                        <i class="bi bi-check-circle"></i> Update Customer
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Permission Denied Modal -->
<div class="modal fade" id="permissionDeniedModal" tabindex="-1" aria-labelledby="permissionDeniedModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="permissionDeniedModalLabel">
                    <i class="bi bi-shield-exclamation"></i> Access Denied
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <i class="bi bi-lock display-1 text-danger mb-3"></i>
                <h4 class="text-danger mb-3">Permission Required</h4>
                <p class="text-muted mb-4">
                    You do not have permission to edit customers. Only <strong>Administrators</strong> and <strong>Managers</strong> can edit customer information.
                </p>
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i>
                    <strong>Your Role:</strong> <span id="userRoleDisplay"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Customer Modal -->
<div class="modal fade" id="deleteCustomerModal" tabindex="-1" aria-labelledby="deleteCustomerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteCustomerModalLabel">
                    <i class="bi bi-exclamation-triangle"></i> Delete Customer
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="deleteCustomerForm" asp-action="Delete" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body text-center">
                    <i class="bi bi-trash display-1 text-danger mb-3"></i>
                    <h4 class="text-danger mb-3">Confirm Deletion</h4>
                    <p class="text-muted mb-4">
                        Are you sure you want to delete customer <strong id="delete-customer-name"></strong>?
                    </p>
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>Warning:</strong> This action cannot be undone. The customer will be permanently removed from the system.
                    </div>
                    <input type="hidden" id="delete-customer-id" name="id" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash"></i> Delete Customer
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Permission Denied Modal -->
<div class="modal fade" id="deletePermissionDeniedModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="bi bi-shield-exclamation"></i> Access Denied
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <i class="bi bi-lock display-1 text-danger mb-3"></i>
                <h4 class="text-danger mb-3">Permission Required</h4>
                <p class="text-muted mb-4">
                    You do not have permission to delete customers. Only <strong>Administrators</strong> can delete customer information.
                </p>
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i>
                    <strong>Your Role:</strong> <span id="deleteUserRoleDisplay"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Hidden field to store user role -->
<input type="hidden" id="userRole" value="@ViewBag.UserRole" />

@section Scripts {
    <script>
        // Get user role from server-side
        const userRole = document.getElementById('userRole').value || 'Guest';
        console.log('=== USER ROLE DEBUG ===');
        console.log('User Role Element Value:', document.getElementById('userRole').value);
        console.log('Final User Role:', userRole);
        console.log('======================');

        function showCustomerDetails(id, firstName, lastName, contact, email, dateOfBirth) {
            document.getElementById('detail-id').textContent = id;
            document.getElementById('detail-firstName').textContent = firstName;
            document.getElementById('detail-lastName').textContent = lastName;
            document.getElementById('detail-contact').textContent = contact;
            document.getElementById('detail-email').textContent = email;
            document.getElementById('detail-dateOfBirth').textContent = new Date(dateOfBirth).toLocaleDateString();

            // Set up edit button to open edit modal
            document.getElementById('editFromDetailsBtn').onclick = function() {
                showEditCustomer(id, firstName, lastName, contact, email, dateOfBirth);
            };

            const modal = new bootstrap.Modal(document.getElementById('customerDetailsModal'));
            modal.show();
        }

        function showEditCustomer(id, firstName, lastName, contact, email, dateOfBirth) {
            // Check if user has permission to edit customers
            const hasEditPermission = userRole === 'Admin' || userRole === 'Manager';

            console.log('User Role:', userRole);
            console.log('Has Edit Permission:', hasEditPermission);

            if (!hasEditPermission) {
                // Show error message for unauthorized users
                console.log('Showing permission denied modal');
                document.getElementById('userRoleDisplay').textContent = userRole;
                const modal = new bootstrap.Modal(document.getElementById('permissionDeniedModal'));
                modal.show();
                return;
            }

            // User has permission, proceed with opening edit modal
            console.log('Opening edit modal');
            document.getElementById('edit-id').value = id;
            document.getElementById('edit-firstName').value = firstName;
            document.getElementById('edit-lastName').value = lastName;
            document.getElementById('edit-contact').value = contact;
            document.getElementById('edit-email').value = email;
            document.getElementById('edit-dateOfBirth').value = dateOfBirth;

            const modal = new bootstrap.Modal(document.getElementById('editCustomerModal'));
            modal.show();
        }

        // Handle form submission
        document.getElementById('editCustomerForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const data = {};
            formData.forEach((value, key) => {
                data[key] = value;
            });

            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("Edit", "Customers")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest',
                    'RequestVerificationToken': token
                },
                body: new URLSearchParams(formData)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Show success message
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-success alert-dismissible fade show';
                    alertDiv.innerHTML = `
                        <i class="bi bi-check-circle"></i> ${result.message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    document.querySelector('.container-fluid').insertBefore(alertDiv, document.querySelector('.container-fluid').firstChild);

                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editCustomerModal'));
                    modal.hide();

                    // Reload page after a short delay
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    alert('Error: ' + result.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating customer. Please try again.');
            });
        });

        function showDeleteCustomer(id, firstName, lastName) {
            // Check if user has permission to delete customers (Admin only)
            const hasDeletePermission = userRole === 'Admin';

            console.log('=== DELETE CUSTOMER DEBUG ===');
            console.log('User Role:', userRole);
            console.log('User Role Type:', typeof userRole);
            console.log('User Role Length:', userRole.length);
            console.log('Has Delete Permission:', hasDeletePermission);
            console.log('============================');

            if (!hasDeletePermission) {
                // Show error message for unauthorized users
                console.log('Showing delete permission denied modal');
                document.getElementById('deleteUserRoleDisplay').textContent = userRole;
                const modal = new bootstrap.Modal(document.getElementById('deletePermissionDeniedModal'));
                modal.show();
                return;
            }

            // User has permission, proceed with delete confirmation
            console.log('Opening delete confirmation modal');
            document.getElementById('delete-customer-id').value = id;
            document.getElementById('delete-customer-name').textContent = `${firstName} ${lastName}`;

            const modal = new bootstrap.Modal(document.getElementById('deleteCustomerModal'));
            modal.show();
        }

        // Handle delete form submission
        document.getElementById('deleteCustomerForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const customerId = formData.get('id');

            // Get anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("Delete", "Customers")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest',
                    'RequestVerificationToken': token
                },
                body: new URLSearchParams(formData)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Show success message
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-success alert-dismissible fade show';
                    alertDiv.innerHTML = `
                        <i class="bi bi-check-circle"></i> ${result.message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    document.querySelector('.container-fluid').insertBefore(alertDiv, document.querySelector('.container-fluid').firstChild);

                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('deleteCustomerModal'));
                    modal.hide();

                    // Reload page after a short delay
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    alert('Error: ' + result.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting customer. Please try again.');
            });
        });
    </script>
}